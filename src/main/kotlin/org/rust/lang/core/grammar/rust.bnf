{
    parserClass='org.rust.lang.core.parser.RustParser'
    parserUtilClass="org.rust.lang.core.parser.RustParserUtil"

    implements='org.rust.lang.core.psi.RustCompositeElement'
    extends='org.rust.lang.core.psi.impl.RustCompositeElementImpl'

    elementTypeHolderClass='org.rust.lang.core.psi.RustCompositeElementTypes'

    elementTypeClass='org.rust.lang.core.psi.RustCompositeElementType'
    tokenTypeClass='org.rust.lang.core.lexer.RustTokenType'

    psiClassPrefix='Rust'
    psiImplClassSuffix='Impl'
    psiPackage='org.rust.lang.core.psi'
    psiImplPackage='org.rust.lang.core.psi.impl'

    parserImports='static org.rust.lang.core.lexer.RustTokenElementTypes.*'


    tokens = [
        LBRACE               =  '{'
        RBRACE               =  '}'
        LBRACK               =  '['
        RBRACK               =  ']'
        LPAREN               =  '('
        RPAREN               =  ')'
        COLON                =  ':'
        COLONCOLON           =  '::'
        SEMICOLON            =  ';'
        COMMA                =  ','
        EQ                   =  '='
        EXCLEQ               =  '!='
        EQEQ                 =  '=='
        SHA                  =  '#'
        SHEBANG              =  '#!'
        EXCL                 =  '!'
        PLUSEQ               =  '+='
        PLUS                 =  '+'
        MINUSEQ              =  '-='
        MINUS                =  '-'
        OROR                 =  '||'
        OREQ                 =  '|='
        ANDAND               =  '&&'
        ANDEQ                =  '&='
        AND                  =  '&'
        OR                   =  '|'
        LT                   =  '<'
        XOREQ                =  '^='
        XOR                  =  '^'
        MULEQ                =  '*='
        MUL                  =  '*'
        DIVEQ                =  '/='
        DIV                  =  '/'
        REMEQ                =  '%='
        REM                  =  '%'
        GT                   =  '>'
        ELLIPSIS             =  '...'
        DOT                  =  '.'
        DOTDOT               =  '..'
        FAT_ARROW            =  '=>'
        ARROW                =  '->'
        Q                    =  '?'
        AT                   =  '@'

        // DEBUG

        ABSTRACT  = 'abstract'
        ALIGNOF   = 'alignof'
        AS        = 'as'
        BECOME    = 'become'
        BOX       = 'box'
        BREAK     = 'break'
        CONST     = 'const'
        CONTINUE  = 'continue'
        CRATE     = 'crate'
        DO        = 'do'
        ELSE      = 'else'
        ENUM      = 'enum'
        EXTERN    = 'extern'
        FALSE     = 'false'
        FINAL     = 'final'
        FN        = 'fn'
        FOR       = 'for'
        IF        = 'if'
        IMPL      = 'impl'
        IN        = 'in'
        LET       = 'let'
        LOOP      = 'loop'
        MACRO     = 'macro'
        MATCH     = 'match'
        MOD       = 'mod'
        MOVE      = 'move'
        MUT       = 'mut'
        OFFSETOF  = 'offsetof'
        OVERRIDE  = 'override'
        PRIV      = 'priv'
        PROC      = 'proc'
        PUB       = 'pub'
        PURE      = 'pure'
        REF       = 'ref'
        RETURN    = 'return'
        CSELF     = 'Self'
        SELF      = 'self'
        SIZEOF    = 'sizeof'
        STATIC    = 'static'
        STRUCT    = 'struct'
        SUPER     = 'super'
        TRAIT     = 'trait'
        TRUE      = 'true'
        TYPE      = 'type'
        TYPEOF    = 'typeof'
        UNSAFE    = 'unsafe'
        UNSIZED   = 'unsized'
        USE       = 'use'
        VIRTUAL   = 'virtual'
        WHERE     = 'where'
        WHILE     = 'while'
        YIELD     = 'yield'

        SHEBANG_LINE = '#!'

        // _DBG
        identifier  = 'regexp:\p{Alpha}\w*'
        space       = 'regexp:\s+'
    ]

    //
    // Mixins
    //

    mixin       ("trait_item") = "org.rust.lang.core.psi.impl.mixin.RustTraitItemImplMixin"

    mixin       ("impl_item")  = "org.rust.lang.core.psi.impl.mixin.RustImplItemImplMixin"

    mixin       ("enum_item") = "org.rust.lang.core.psi.impl.mixin.RustEnumItemImplMixin"

    mixin       ("enum_def") = "org.rust.lang.core.psi.impl.mixin.RustEnumDefImplMixin"

    mixin       ("struct_item") = "org.rust.lang.core.psi.impl.mixin.RustStructItemImplMixin"

    mixin       ("struct_decl_field") = "org.rust.lang.core.psi.impl.mixin.RustStructDeclFieldImplMixin"

    mixin       ("mod_decl_item") = "org.rust.lang.core.psi.impl.mixin.RustModDeclItemImplMixin"

    mixin       ("const_item") = "org.rust.lang.core.psi.impl.mixin.RustConstItemImplMixin"

    mixin       ("extern_decl_item") = "org.rust.lang.core.psi.impl.mixin.RustExternDeclItemImplMixin"

    mixin       ("foreign_fn_item") = "org.rust.lang.core.psi.impl.mixin.RustForeignFnItemImplMixin"

    mixin       ("foreign_mod_item") = "org.rust.lang.core.psi.impl.mixin.RustForeignModItemImplMixin"

    mixin       ("static_item") = "org.rust.lang.core.psi.impl.mixin.RustStaticItemImplMixin"

    mixin       ("type_item") = "org.rust.lang.core.psi.impl.mixin.RustTypeItemImplMixin"

    mixin       ("use_item") = "org.rust.lang.core.psi.impl.mixin.RustUseItemImplMixin"

    mixin       ("struct_tuple_field") = "org.rust.lang.core.psi.impl.mixin.RustStructTupleFieldImplMixin"


    //
    // References
    //

    mixin       ("path_part") = "org.rust.lang.core.psi.impl.mixin.RustPathPartImplMixin"
    implements  ("path_part") = "org.rust.lang.core.psi.RustQualifiedReferenceElement"

    //
    // Resolve scopes
    //

    implements  ("file_mod_item") = "org.rust.lang.core.resolve.scope.RustResolveScope"
    mixin       ("file_mod_item") = "org.rust.lang.core.psi.impl.mixin.RustFileModItemImplMixin"

    implements  ("mod_item") = "org.rust.lang.core.resolve.scope.RustResolveScope"
    mixin       ("mod_item") = "org.rust.lang.core.psi.impl.mixin.RustModItemImplMixin"

    implements  ("fn_item") = "org.rust.lang.core.resolve.scope.RustResolveScope"
    mixin       ("fn_item") = "org.rust.lang.core.psi.impl.mixin.RustFnItemImplMixin"

    implements  ("trait_method") = "org.rust.lang.core.resolve.scope.RustResolveScope"
    mixin       ("trait_method") = "org.rust.lang.core.psi.impl.mixin.RustTraitMethodImplMixin"

    implements  ("lambda_expr") = "org.rust.lang.core.resolve.scope.RustResolveScope"
    mixin       ("lambda_expr") = "org.rust.lang.core.psi.impl.mixin.RustLambdaExprImplMixin"

    implements  ("impl_method") = ["org.rust.lang.core.resolve.scope.RustResolveScope"
                                   "org.rust.lang.core.psi.RustAccessControlElement"]
    mixin       ("impl_method") = "org.rust.lang.core.psi.impl.mixin.RustImplMethodImplMixin"

    implements  ("block") =  "org.rust.lang.core.resolve.scope.RustResolveScope"
    mixin       ("block") =  "org.rust.lang.core.psi.impl.mixin.RustBlockImplMixin"

    implements  ("scoped_let_expr") = "org.rust.lang.core.resolve.scope.RustResolveScope"
    mixin       ("scoped_let_expr") = "org.rust.lang.core.psi.impl.mixin.RustScopedLetExprImplMixin"

    implements  ("for_expr") = "org.rust.lang.core.resolve.scope.RustResolveScope"
    mixin       ("for_expr") = "org.rust.lang.core.psi.impl.mixin.RustForExprImplMixin"

    implements  ("match_arm") = "org.rust.lang.core.resolve.scope.RustResolveScope"
    mixin       ("match_arm") = "org.rust.lang.core.psi.impl.mixin.RustMatchArmImplMixin"


    //
    // Declaring elements
    //

    implements  ("let_decl")    = "org.rust.lang.core.psi.RustDeclaringElement"
    mixin       ("let_decl")    = "org.rust.lang.core.psi.impl.mixin.RustLetDeclImplMixin"

    implements  ("scoped_let_decl") = "org.rust.lang.core.psi.RustDeclaringElement"
    mixin       ("scoped_let_decl") = "org.rust.lang.core.psi.impl.mixin.RustScopedLetDeclImplMixin"

    implements  ("scoped_for_decl") = "org.rust.lang.core.psi.RustDeclaringElement"
    mixin       ("scoped_for_decl") = "org.rust.lang.core.psi.impl.mixin.RustScopedForDeclImplMixin"

    implements  ("param")       = "org.rust.lang.core.psi.RustDeclaringElement"
    mixin       ("param")       = "org.rust.lang.core.psi.impl.mixin.RustParamImplMixin"

    implements  ("anon_param")  = "org.rust.lang.core.psi.RustDeclaringElement"
    mixin       ("anon_param")  = "org.rust.lang.core.psi.impl.mixin.RustAnonParamImplMixin"

    implements  ("lambda_param")  = "org.rust.lang.core.psi.RustDeclaringElement"
    mixin       ("lambda_param")  = "org.rust.lang.core.psi.impl.mixin.RustLambdaParamImplMixin"

    implements  ("match_pat")   = "org.rust.lang.core.psi.RustDeclaringElement"
    mixin       ("match_pat")   = "org.rust.lang.core.psi.impl.mixin.RustMatchPatImplMixin"

    implements  ("pat_binding") = ["org.rust.lang.core.psi.RustDeclaringElement" "org.rust.lang.core.psi.RustNamedElement"]
    mixin       ("pat_binding") = "org.rust.lang.core.psi.impl.mixin.RustPatBindingImplMixin"

    //
    // AccessControl
    //

    implements("struct_decl_field")  = "org.rust.lang.core.psi.RustAccessControlElement"
    implements("struct_tuple_field") = "org.rust.lang.core.psi.RustAccessControlElement"

    //
    //  Misc
    //

    implements  ("alias") = "org.rust.lang.core.psi.RustNamedElement"
    extends     ("alias") = "org.rust.lang.core.psi.impl.RustNamedElementImpl"

    implements  ("use_glob") = "org.rust.lang.core.psi.RustNamedElement"
    mixin       ("use_glob") = "org.rust.lang.core.psi.impl.mixin.RustUseGlobImplMixin"

    elementType(".*_bin_expr")   = binary_expr
    elementType(".*_range_expr") = range_expr

    extends           ("(?!meta_item)(?!foreign_item).*_item") = item_
    elementTypeFactory("(?!meta_item)(?!foreign_item).*_item") = "org.rust.lang.core.stubs.types.ElementFactoryKt.factory"
    stubClass         ("(?!meta_item)(?!foreign_item).*_item") = "org.rust.lang.core.stubs.RustItemStub"


    extends("(if|while)_let_expr") = scoped_let_expr
    extends(".*_expr") = restricted_expr
    extends(".*_stmt") = stmt
    extends("pat_.*")  = pat
    extends(".*_attr") = attr
    extends("inner_attrs_and_block") = block

    generateTokens=false
    generateTokenAccessors=true

    consumeTokenMethod(".*") = "consumeTokenFast"

    //recoverWhile = skip_until_eol_rec
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Root
///////////////////////////////////////////////////////////////////////////////////////////////////

root ::= file_mod_item

//
// NOTA BENE
//  Its marked left just to impede GK from collapsing it in the
//  case there're no `SHEBANG_LINE` & it starts with `inner_attrs` or `item`
//
left file_mod_item ::= [ SHEBANG_LINE ] [ inner_attrs ] item * {
  extends = mod_item
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Attributes
///////////////////////////////////////////////////////////////////////////////////////////////////

private inner_attrs ::= inner_attr +
inner_attr ::= SHEBANG LBRACK meta_item RBRACK | INNER_DOC_COMMENT

meta_item ::= IDENTIFIER [ EQ lit_expr | LPAREN meta_seq RPAREN ]

private meta_seq ::= meta_item [ COMMA meta_seq? ]

private outer_attrs ::= outer_attr +
outer_attr ::= SHA LBRACK meta_item RBRACK | OUTER_DOC_COMMENT

fake attr ::=

///////////////////////////////////////////////////////////////////////////////////////////////////
// Items
///////////////////////////////////////////////////////////////////////////////////////////////////

vis ::= PUB

private attrs_and_vis ::= outer_attrs? vis?
private item_inner ::= stmt_item_group
                     | item_macro

//
// TODO(kudinkin): That's a hack to force GK to generate accessors
//                 for the items
//
// NOTA BENE: Naming is crucial
//
fake item_ ::= attrs_and_vis {
  implements  = [ "org.rust.lang.core.psi.RustDeclaringElement"
                  "org.rust.lang.core.psi.RustNamedElement"
                  "org.rust.lang.core.psi.RustAccessControlElement" ]
  mixin       = "org.rust.lang.core.psi.impl.mixin.RustItemImplMixin"
  stubClass   = "org.rust.lang.core.stubs.RustItemStub"
}

upper item ::= << injectInto attrs_and_vis item_inner >> {
  elementType = item_
}

private stmt_item_group ::= static_item
                          | const_item
                          | type_item
                          | block_item_group
                          | view_item


private block_item_group ::= &(CONST? UNSAFE? [ EXTERN abi? ] FN) fn_item
                           | &(UNSAFE? TRAIT ) trait_item
                           | &(UNSAFE? IMPL  ) impl_item
                           | mod_decl_item
                           | mod_item
                           | foreign_mod_item
                           | struct_item
                           | enum_item


///////////////////////////////////////////////////////////////////////////////////////////////////
// Functions
///////////////////////////////////////////////////////////////////////////////////////////////////

private fn_header ::= CONST? UNSAFE? [ EXTERN abi? ] FN IDENTIFIER

fn_item ::= fn_header generic_params fn_params ret_type? where_clause? inner_attrs_and_block {
   pin(".*")=1
}

foreign_fn_item ::= FN IDENTIFIER generic_params fn_decl_allow_variadic where_clause? SEMICOLON

private fn_decl_allow_variadic   ::= fn_params_allow_variadic ret_type?
private fn_params_allow_variadic ::= LPAREN params COMMA DOTDOTDOT RPAREN
                                   | LPAREN params COMMA RPAREN
                                   | LPAREN params RPAREN
                                   | LPAREN RPAREN


generic_params ::= [ generic_params_inner ]

private generic_params_inner ::= LT lifetimes [ COMMA [ type_params COMMA? ] ] GT
                               | LT                     type_params COMMA?     GT
                            /* | LT lifetimes                         GTGT
                               | LT lifetimes COMMA                   GTGT */
                            /* | LT lifetimes COMMA type_params       GTGT
                               | LT lifetimes COMMA type_params COMMA GTGT */
                            /* | LT                 type_params SHR
                               | LT                 type_params COMMA SHR */

lifetimes ::= lifetime_and_bounds (COMMA lifetime_and_bounds)*

private lifetime_and_bounds ::= LIFETIME lifetime_bounds? | STATIC_LIFETIME
private lifetime_bounds     ::= COLON lifetime (PLUS lifetime)*

private type_params ::= type_param (COMMA type_params)*

type_param ::= [ IDENTIFIER Q ] IDENTIFIER type_param_bounds? type_param_default?

type_param_bounds   ::= COLON [ type_param_bound_seq ]
type_param_default  ::= EQ type_sum

type_sum    ::= type [ PLUS bounds ]
type_sums   ::= type_sum !EQ (COMMA type_sum !EQ)*

private type_param_bound_seq        ::= polybound type_param_bound_seq_right
private type_param_bound_seq_right  ::= [ PLUS polybound type_param_bound_seq_right ]

polybound ::= [ FOR LT lifetimes? GT | Q ] bound

bound   ::= lifetime | trait_ref
bounds  ::= bound (PLUS bound)*

where_clause ::= WHERE <<comma_separated_list where_pred>>

where_pred ::= for_lifetimes? (lifetime COLON bounds | type type_param_bounds)

for_lifetimes ::= FOR LT lifetimes GT

fn_params ::= LPAREN !COMMA params COMMA? RPAREN    { pin(".*")=1 }
ret_type  ::= ARROW (type | EXCL)                   { pin=1 }

private params ::= [ param (COMMA param)* ]

param ::= pat COLON type_sum

pat ::= pat_wild
      | pat_reg
      | pat_tup
      | pat_vec
      | pat_macro
      | pat_struct
      | pat_enum
      | pat_ident
      | pat_range
      | pat_uniq
      | pat_qual_path
   /* | SHL ty_sum maybe_as_trait_ref '>' MOD_SEP ident maybe_as_trait_ref '>' MOD_SEP ident */

pat_qual_path   ::= << qualified_path path_without_types >>
pat_uniq        ::= BOX pat

// XXX(matklad): it is impossible to distinguish between nullary enum variants
// and identifiers during parsing.
//
//   match x {
//       None => { } // match enum variant
//       Name => { } // bind Name to x
//   }
pat_ident       ::= pat_binding [ AT pat ]


pat_struct      ::= path_expr LBRACE pat_struct_fields RBRACE       { pin = 'LBRACE' }
pat_enum        ::= path_expr LPAREN (DOTDOT | pat_tup_elts) RPAREN { pin = 'LPAREN' }

pat_range ::= lit_or_path [ DOTDOTDOT lit_or_path ]

pat_tup ::= LPAREN [ pat_tup_elts COMMA? ] RPAREN
pat_vec ::= LBRACK pat_vec_elts RBRACK

private pat_tup_elts ::= pat (COMMA pat)*
private pat_vec_elts ::= [ pat_tup_elts COMMA? ] [ DOTDOT [ COMMA pat_tup_elts COMMA? ] ]

pat_reg ::= AND MUT? pat
          | ANDAND pat

pat_wild ::= UNDERSCORE
pat_binding ::= binding_mode? IDENTIFIER !DOTDOTDOT !COLONCOLON

private lit_or_path ::= path_expr | lit | MINUS lit

generic_args ::= LT generic_values GT
            /* | LT generic_values GTGT */
            /* | LT generic_values GTEQ */
            /* | LT generic_values GTGTEQ */
            /* | LTLT ty_qualified_path_and_generic_values GT
               | LTLT ty_qualified_path_and_generic_values GTGT
               | LTLT ty_qualified_path_and_generic_values GTEQ
               | LTLT ty_qualified_path_and_generic_values GTGTEQ */

private generic_values ::= lifetimes [ COMMA type_sums_and_or_bindings ] COMMA?
                         |                   type_sums_and_or_bindings?

private type_sums_and_or_bindings ::=                   bindings   COMMA?
                                    | type_sums [ COMMA bindings ] COMMA?

bindings ::= binding (COMMA binding)*
binding  ::= IDENTIFIER EQ type

pat_struct_fields ::= (pat_field COMMA)+ DOTDOT
                    | <<comma_separated_list pat_field>>
                    | DOTDOT

pat_field ::= IDENTIFIER COLON pat
            | BOX? pat_binding

binding_mode ::= REF MUT? | MUT

private decl_item ::= IDENTIFIER COLON type

static_item ::= STATIC MUT? decl_item EQ any_expr SEMICOLON

const_item ::= CONST decl_item EQ any_expr SEMICOLON

private view_item ::= use_item
                    | extern_decl_item

use_item ::= USE view_path SEMICOLON { pin = 2 }

abi ::= STRING_LITERAL



///////////////////////////////////////////////////////////////////////////////////////////////////
// Crate
///////////////////////////////////////////////////////////////////////////////////////////////////

extern_decl_item ::= EXTERN CRATE crate_name SEMICOLON

private crate_name ::= IDENTIFIER alias?


///////////////////////////////////////////////////////////////////////////////////////////////////
// Struct & Enum
///////////////////////////////////////////////////////////////////////////////////////////////////

mod_decl_item ::= MOD IDENTIFIER SEMICOLON

mod_item ::= MOD IDENTIFIER LBRACE inner_attrs? item * RBRACE {
  pin = "LBRACE"
}

foreign_mod_item ::= EXTERN abi? LBRACE inner_attrs? foreign_items? RBRACE { pin = "LBRACE" }

private foreign_items ::= foreign_item +

foreign_item  ::= attrs_and_vis STATIC  foreign_static_item
                | attrs_and_vis UNSAFE? foreign_fn_item

private foreign_static_item ::= MUT? IDENTIFIER COLON type SEMICOLON


///////////////////////////////////////////////////////////////////////////////////////////////////
// Struct
///////////////////////////////////////////////////////////////////////////////////////////////////

struct_item ::= STRUCT IDENTIFIER generic_params (struct_tuple_args? where_clause? SEMICOLON | where_clause? struct_decl_args)

struct_tuple_args ::= LPAREN struct_tuple_fields COMMA? RPAREN

private struct_tuple_fields ::= struct_tuple_field (COMMA struct_tuple_field)*

struct_tuple_field ::= attrs_and_vis type_sum

struct_decl_args ::= LBRACE struct_decl_fields COMMA? RBRACE { pin = 1 }

private struct_decl_fields ::= [ struct_decl_field (COMMA struct_decl_field)* ]

struct_decl_field ::= attrs_and_vis IDENTIFIER COLON type_sum { pin = 2 }


///////////////////////////////////////////////////////////////////////////////////////////////////
// Enum
///////////////////////////////////////////////////////////////////////////////////////////////////

enum_item ::= ENUM IDENTIFIER generic_params where_clause? LBRACE enum_defs? COMMA? RBRACE { pin = "LBRACE" }

private enum_defs ::= enum_def (COMMA enum_def)*

enum_def ::= attrs_and_vis IDENTIFIER enum_args?

enum_args ::= LBRACE struct_decl_fields COMMA? RBRACE
            | LPAREN type_sums? RPAREN
            | EQ any_expr


///////////////////////////////////////////////////////////////////////////////////////////////////
// Trait
///////////////////////////////////////////////////////////////////////////////////////////////////

trait_item ::= UNSAFE? TRAIT IDENTIFIER generic_params? for_sized? type_param_bounds? where_clause? LBRACE trait_contents* RBRACE {
  pin = "LBRACE"
}

for_sized ::= FOR Q IDENTIFIER
            | FOR IDENTIFIER Q

private trait_contents ::= trait_const | trait_type | trait_method

trait_const ::= outer_attrs? CONST IDENTIFIER type_ascription? const_default? SEMICOLON

type_ascription ::= COLON type_sum

private const_default ::= EQ any_expr

trait_type ::= outer_attrs? TYPE type_param SEMICOLON

trait_method ::= outer_attrs? fn_header generic_params fn_decl_with_self_allow_anon_params where_clause? (SEMICOLON | inner_attrs_and_block)

private fn_decl_with_self_allow_anon_params ::= fn_anon_params_with_self ret_type?
private fn_anon_params_with_self ::= LPAREN [ AND lifetime? ] MUT? SELF type_ascription? comma_anon_params? RPAREN
                                   | LPAREN anon_params? RPAREN

private comma_anon_params ::= COMMA [ anon_params COMMA? ]

anon_params ::= anon_param (COMMA anon_param)*

anon_param ::= [ named_arg COLON ] type

private named_arg ::= &( IDENTIFIER
                       | UNDERSCORE
                       | AND (IDENTIFIER | UNDERSCORE)
                       | ANDAND (IDENTIFIER | UNDERSCORE)
                       | MUT IDENTIFIER
                       ) pat


trait_ref ::= path_generic_args_without_colons


///////////////////////////////////////////////////////////////////////////////////////////////////
// Impl
///////////////////////////////////////////////////////////////////////////////////////////////////

impl_item ::= UNSAFE? IMPL generic_params type_sum                      where_clause? LBRACE inner_attrs? impl_contents* RBRACE
            | UNSAFE? IMPL generic_params LPAREN type RPAREN            where_clause? LBRACE inner_attrs? impl_contents* RBRACE
            | UNSAFE? IMPL generic_params EXCL? trait_ref FOR (type_sum where_clause? LBRACE inner_attrs? impl_contents* RBRACE | DOTDOT LBRACE RBRACE) {
  pin(".*") = "LBRACE"
}

private impl_contents ::= impl_method
                        | impl_const
                        | impl_macro
                        | impl_type

impl_method ::= attrs_and_vis fn_header generic_params fn_decl_with_self where_clause? inner_attrs_and_block

private fn_decl_with_self ::= fn_params_with_self ret_type?

private fn_params_with_self ::= LPAREN [ AND lifetime? ] MUT? SELF type_ascription? comma_params? RPAREN
                              | LPAREN params? RPAREN

private comma_params ::= COMMA [ params COMMA? ]

private impl_const ::= attrs_and_vis const_item

private impl_type ::= attrs_and_vis TYPE IDENTIFIER generic_params EQ type_sum SEMICOLON


///////////////////////////////////////////////////////////////////////////////////////////////////
// Types
///////////////////////////////////////////////////////////////////////////////////////////////////

private type ::= BOX type
               | MUL    [ MUT | CONST ] type
               | AND    [ lifetime? MUT? ] type
               | ANDAND [ lifetime? MUT? ] type
               | LBRACK type [ (COMMA DOTDOT | SEMICOLON) any_expr ] RBRACK
               | UNDERSCORE
               | type_bare_fn
               | for_in_type
               | LPAREN [ type_sums COMMA? ] RPAREN

               /* Paths */
               | !LT path_generic_args_without_colons
               | &LT type_qual_path

type_item ::= TYPE IDENTIFIER generic_params where_clause? EQ type_sum SEMICOLON

type_qual_path ::= << qualified_path view_path_prefix >>

private type_bare_fn ::= [ UNSAFE? [ EXTERN abi? ] ] FN type_fn_decl

private type_fn_decl ::= generic_params fn_anon_params ret_type?

private fn_anon_params ::= LPAREN anon_param anon_params_allow_variadic_tail RPAREN
                         | LPAREN RPAREN

private anon_params_allow_variadic_tail ::= [ COMMA (DOTDOTDOT | anon_param anon_params_allow_variadic_tail) ]


private for_in_type ::= FOR LT lifetimes? GT for_in_type_suffix
private for_in_type_suffix ::= type_bare_fn
                             | trait_ref


///////////////////////////////////////////////////////////////////////////////////////////////////
// Paths
///////////////////////////////////////////////////////////////////////////////////////////////////

path_part ::= ident_or_self_or_super [ COLONCOLON generic_args ]

//
// Paths (with `::` separating `generic_args` from actual name) used in expression contexts:
//
//    a::b::<T,U>::c
//

private path_generic_args_with_colons ::= path_generic_args_with_colons_part_leftish path_generic_args_with_colons_part*

left path_generic_args_with_colons_part ::= COLONCOLON path_generic_args_with_colons_part_inner {
  elementType = path_part
}

path_generic_args_with_colons_part_leftish ::= path_generic_args_with_colons_part_inner | &COLONCOLON {
  elementType = path_part
}

private path_generic_args_with_colons_part_inner ::= ident_or_self_or_super [ COLONCOLON generic_args ]


//
// TODO(kudinkin, matklad):
//
//    In rustc parser, self/super are treated as identifiers only if immediately followed by `::`
//    Thus, these are valid paths:
//
//      `foo :: bar ::baz`
//      `self:: super::foo ::baz`
//
//  and these are invalid ones
//
//      `self ::foo::bar`
//      `self::super ::foo`
//
// We parse all the above paths as valid.
//



private ident_or_self_or_super ::= IDENTIFIER | SUPER | SELF | CSELF


//
// Paths (w/o types and therefore `generic_args`, containing only identifiers, `self`, etc.):
//
//    a::b::c
//

private path_without_types ::= path_without_types_part_leftish path_without_types_part*

path_without_types_part_leftish ::= path_without_types_part_inner {
  elementType = path_part
}

left path_without_types_part ::= COLONCOLON path_without_types_part_inner {
  elementType = path_part
}

private path_without_types_part_inner ::= ident_or_self_or_super

//
// Paths (w/o `::` separating `generic_args` from actual name) used in type contexts:
//
//    a::b<T,U>::c<V,W>
//    a::b<T,U>::c(V) -> W
//    a::b<T,U>::c(V)
//

private path_generic_args_without_colons ::= path_generic_args_without_colons_part_leftish path_generic_args_without_colons_part*

left path_generic_args_without_colons_part ::= COLONCOLON path_generic_args_without_colons_part_inner {
  elementType = path_part
}

path_generic_args_without_colons_part_leftish ::= path_generic_args_without_colons_part_inner | &COLONCOLON {
  elementType = path_part
}

private path_generic_args_without_colons_part_inner ::= ident_or_self_or_super [ generic_args | LPAREN type_sums? RPAREN ret_type? ]


//
// Qualified paths
//
//    <TYPE [as TRAIT_REF]> :: (path_without_types | path_generic_args_without_colons | path_generic_args_with_colons)
//
//    <T>::c<V,W>
//    <T as Foo>::c(V) -> W
//

private meta qualified_path ::= LT type [ AS trait_ref ] GT COLONCOLON << param >>


///////////////////////////////////////////////////////////////////////////////////////////////////
// Views
///////////////////////////////////////////////////////////////////////////////////////////////////

//
// Paths used in use items:
//
//    foo::bar::{self, foo}
//    {foo, bar}
//    ::foo::*
//    foo::bar as baz
//
view_path ::= [ view_path_prefix? COLONCOLON ] LBRACE [ <<comma_separated_list use_glob>> ] RBRACE
            |   view_path_prefix COLONCOLON MUL
            |   view_path_prefix alias?

use_glob ::= (IDENTIFIER | SELF) alias?

alias ::= AS IDENTIFIER

private view_path_prefix ::= view_path_part_leftish view_path_part*

view_path_part_leftish ::= COLONCOLON? (SELF | SUPER | IDENTIFIER) {
  elementType = path_part
}

left view_path_part ::= COLONCOLON (SUPER | IDENTIFIER) {
  elementType = path_part
}


///////////////////////////////////////////////////////////////////////////////////////////////////
// Expressions
///////////////////////////////////////////////////////////////////////////////////////////////////


//
// NOTA BENE
//
//  That's a synthetic production solely designated to produce
//  valid PSI hierarchy, to use the unrestricted version of expression check `unrestricted_expr`
//
expr ::=

restricted_expr ::= ret_expr
                  | assign_bin_expr
                  | block_expr
                  | cont_expr
                  | break_expr
                  | lambda_expr
                  | full_range_expr
                  | open_range_expr
                  | bool_or_bin_expr
                  | bool_and_bin_expr
                  | bit_or_bin_expr
                  | bit_xor_bin_expr
                  | bit_and_bin_expr
                  | comp_bin_expr
                  | rel_comp_bin_expr
                  | bit_shift_bin_expr
                  | add_bin_expr
                  | mul_bin_expr
                  | cast_expr
                  | unary_expr
                  | atom_expr {
  elementType = expr
}

// https://github.com/rust-lang/rfcs/blob/master/text/0092-struct-grammar.md
private no_struct_lit_expr  ::= << withoutStructLiterals restricted_expr >>
private any_expr            ::= << withStructLiterals restricted_expr >>


block_expr ::= while_expr
             | while_let_expr
             | if_expr
             | if_let_expr
             | for_expr
             | loop_expr
             | match_expr
             | (UNSAFE &LBRACE)? block


private atom_expr ::= lit_expr
                    | macro_expr
                    | struct_expr
                    | qual_path_expr
                    | method_call_expr
                    | field_expr
                    | index_expr
                    | path_expr !LPAREN
                    | call_expr
                    | array_expr
                    | tuple_expr
                    | unit_expr
                    | paren_expr


binary_expr ::= restricted_expr + {
    methods=[
        left="/expr[0]"
        right="/expr[1]"
    ]
}

assign_bin_expr ::= restricted_expr
                  ( GTGTEQ
                  | LTLTEQ
                  | OREQ
                  | XOREQ
                  | ANDEQ
                  | EQ
                  | PLUSEQ
                  | MINUSEQ
                  | MULEQ
                  | DIVEQ
                  | REMEQ
                  ) restricted_expr    { rightAssociative = true }

comp_bin_expr       ::= restricted_expr (EQEQ | EXCLEQ) restricted_expr
rel_comp_bin_expr   ::= restricted_expr (LT !(LT | EQ) | GT !(GT | EQ) | LTEQ | GTEQ) restricted_expr
bit_shift_bin_expr  ::= restricted_expr (LTLT | GTGT) restricted_expr
add_bin_expr        ::= restricted_expr (PLUS | MINUS) restricted_expr
mul_bin_expr        ::= restricted_expr (MUL | DIV | REM) restricted_expr

bool_or_bin_expr    ::= restricted_expr OROR restricted_expr
bool_and_bin_expr   ::= restricted_expr ANDAND restricted_expr
bit_or_bin_expr     ::= restricted_expr OR restricted_expr
bit_xor_bin_expr    ::= restricted_expr XOR restricted_expr
bit_and_bin_expr    ::= restricted_expr AND restricted_expr


cast_expr ::= restricted_expr AS type

unary_expr ::= (MINUS | MUL | EXCL | (AND | ANDAND) MUT?) restricted_expr

lambda_expr ::= MOVE? (OROR | OR [<<comma_separated_list lambda_param>>] OR) ret_type? any_expr
lambda_param ::= pat type_ascription?

struct_expr ::= << checkStructAllowed >> path_generic_args_with_colons struct_expr_body

struct_expr_body ::= LBRACE
                       [ <<comma_separated_list (IDENTIFIER COLON any_expr)>> ]
                       (DOTDOT  any_expr)?
                     RBRACE {
  pin(".*") = "LBRACE"
}

path_expr ::= path_generic_args_with_colons

qual_path_expr ::= << qualified_path path_generic_args_with_colons >>
              /* | LTLT type_sum [ AS trait_ref ] GT COLONCOLON IDENTIFIER generic_args? [ AS trait_ref ] GT COLONCOLON IDENTIFIER generic_args? */

while_expr ::= [lifetime COLON] WHILE no_struct_lit_expr block

loop_expr ::= [lifetime COLON] LOOP block
cont_expr ::= CONTINUE lifetime?

break_expr ::= BREAK lifetime?

scoped_for_decl ::= pat IN no_struct_lit_expr

for_expr ::= [lifetime COLON] FOR scoped_for_decl block { pin = "IN" }

match_expr ::= MATCH no_struct_lit_expr LBRACE match_arm* RBRACE { pin = "LBRACE" }

match_arm ::= outer_attrs* match_pat FAT_ARROW (block_expr COMMA? | any_expr (COMMA | &RBRACE))
match_pat ::= pat (OR pat)* (IF any_expr)?

if_expr ::= IF no_struct_lit_expr block else_tail?

private else_tail ::= ELSE (if_expr | if_let_expr | block)

fake scoped_let_expr ::= scoped_let_decl EQ no_struct_lit_expr block

scoped_let_decl ::= LET pat EQ no_struct_lit_expr

if_let_expr ::= IF scoped_let_decl block else_tail?

while_let_expr ::= WHILE scoped_let_decl block


ret_expr ::= RETURN restricted_expr?

paren_expr ::= (LPAREN any_expr RPAREN)

unit_expr ::= LPAREN RPAREN

tuple_expr ::= LPAREN any_expr ((COMMA any_expr)+ | COMMA) RPAREN

array_expr ::= LBRACK array_elems? RBRACK {pin=1}

private array_elems ::= any_expr SEMICOLON any_expr
                      | expr_list


//private range_expr_group ::= open_range_expr
//                           | full_range_expr

full_range_expr ::= restricted_expr DOTDOT (&<<checkBraceAllowed>> restricted_expr)?
open_range_expr ::=                 DOTDOT (&<<checkBraceAllowed>> restricted_expr)?

range_expr ::= restricted_expr + {
    methods=[
        from="/expr[0]"
        to="/expr[1]"
    ]
}


index_expr ::= restricted_expr index_arg

private index_arg ::= LBRACK restricted_expr RBRACK

call_expr ::= restricted_expr arg_list

method_call_expr ::= restricted_expr DOT IDENTIFIER [COLONCOLON generic_args] arg_list { pin=2 }

arg_list ::= LPAREN expr_list? RPAREN {pin=1}

private expr_list ::= <<comma_separated_list any_expr>>

field_expr ::= restricted_expr DOT (IDENTIFIER | INTEGER_LITERAL) { pin(".*")=2 }

lit_expr ::= lit


///////////////////////////////////////////////////////////////////////////////////////////////////
// Macros
///////////////////////////////////////////////////////////////////////////////////////////////////


macro_expr ::= ( "try" EXCL LPAREN any_expr RPAREN
               | IDENTIFIER EXCL macro_arg )

pat_macro  ::= IDENTIFIER EXCL macro_arg

macro_arg ::= LPAREN token_tree? RPAREN
            | LBRACE token_tree? RBRACE
            | LBRACK token_tree?  RBRACK { pin(".*") = 1 }

// This "parses" both macro definitions and macro usage
item_macro ::= IDENTIFIER EXCL IDENTIFIER?
             ( LPAREN token_tree? RPAREN SEMICOLON
             | LBRACE token_tree? RBRACE
             | LBRACK token_tree? RBRACK SEMICOLON )

impl_macro ::= IDENTIFIER EXCL IDENTIFIER?
             ( LPAREN token_tree? RPAREN SEMICOLON
             | LBRACE token_tree? RBRACE
             | LBRACK token_tree? RBRACK SEMICOLON )

token_tree ::= LPAREN token_tree* RPAREN token_tree*
             | LBRACE token_tree* RBRACE token_tree*
             | LBRACK token_tree* RBRACK token_tree*
             | << unpairedToken >> + token_tree*


///////////////////////////////////////////////////////////////////////////////////////////////////
// Literals
///////////////////////////////////////////////////////////////////////////////////////////////////

private lit ::= ( STRING_LITERAL
                | CHAR_LITERAL
                | BYTE_STRING_LITERAL
                | BYTE_LITERAL
                | INTEGER_LITERAL
                | FLOAT_LITERAL
                | bool_lit )

private bool_lit ::= FALSE | TRUE


///////////////////////////////////////////////////////////////////////////////////////////////////
// Lifetimes
///////////////////////////////////////////////////////////////////////////////////////////////////

private lifetime ::= LIFETIME | STATIC_LIFETIME


///////////////////////////////////////////////////////////////////////////////////////////////////
// Declarations
///////////////////////////////////////////////////////////////////////////////////////////////////

let_decl ::= LET pat [ COLON type ] [ EQ restricted_expr ] SEMICOLON


///////////////////////////////////////////////////////////////////////////////////////////////////
// Statements
///////////////////////////////////////////////////////////////////////////////////////////////////

block ::= LBRACE stmt_* restricted_expr? RBRACE {
  pin(".*") = 1
}

inner_attrs_and_block ::= LBRACE inner_attrs? stmt_* restricted_expr? RBRACE {
  elementType = block
  pin(".*")=1
}


expr_stmt   ::= restricted_expr SEMICOLON | (block_expr !DOT)
decl_stmt   ::= item | let_decl
empty_stmt  ::= SEMICOLON

// TODO(kudinkin):  That's a hack to overcome GK's bug
//                  producing parsing rules for `fake` productions

stmt ::=

private stmt_ ::= expr_stmt
                | decl_stmt
                | empty_stmt

///////////////////////////////////////////////////////////////////////////////////////////////////
// Utils
///////////////////////////////////////////////////////////////////////////////////////////////////

GTGTEQ ::= GT GT EQ
GTGT   ::= GT GT
GTEQ   ::= GT EQ

LTLTEQ ::= LT LT EQ
LTLT   ::= LT LT
LTEQ   ::= LT EQ

// Trailing commas are allowed
private meta comma_separated_list ::= <<param>> ( COMMA <<param>> ) * COMMA?

private skip_until_eol_rec ::= !(<< skipUntilEOL >>)
